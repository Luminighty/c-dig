header_guard = "LINALG_H"
filename = "linalg"
include_folder = "../include"
src_folder = "../src"

vectors = [
    {"name": "Vec2i", "prefix": "vec2i", "component": "int"  , "dimension": 2},
    {"name": "Vec2" , "prefix": "vec2" , "component": "float", "dimension": 2},
]

component_names = ["x", "y", "z", "w"]


def vector_create(file, vector, is_header):
    if is_header:
        vector_typedef(file, vector)
    vector_op(file, vector, is_header, "add", "+")
    vector_op(file, vector, is_header, "sub", "-")
    vector_scale(file, vector, is_header)
    vector_dot(file, vector, is_header)
    vector_lengthsqr(file, vector, is_header)
    file.write("\n")


def vector_lengthsqr(file, vector, is_header):
    name = vector["name"]
    comp = vector["component"]
    dim = vector["dimension"]
    prefix = vector["prefix"]
    if not is_header:
        file.write("inline ")
    file.write(f"{comp} {prefix}_lengthsqr({name} vector)")
    if is_header:
        file.write(";\n")
        return
    file.write(" {\n")

    file.write(f"\treturn ")
    for i in range(0, vector["dimension"]):
        field = component_names[i]
        if i > 0:
            file.write(f" + ")
        file.write(f"(vector.{field} * vector.{field})")
    file.write(";\n")
    file.write("}\n")



def vector_dot(file, vector, is_header):
    name = vector["name"]
    comp = vector["component"]
    dim = vector["dimension"]
    prefix = vector["prefix"]
    if not is_header:
        file.write("inline ")
    file.write(f"{comp} {prefix}_dot({name} a, {name} b)")
    if is_header:
        file.write(";\n")
        return
    file.write(" {\n")

    file.write(f"\treturn ")
    for i in range(0, vector["dimension"]):
        field = component_names[i]
        if i > 0:
            file.write(f" + ")
        file.write(f"(a.{field} * b.{field})")
    file.write(";\n")
    file.write("}\n")


def vector_scale(file, vector, is_header):
    name = vector["name"]
    comp = vector["component"]
    dim = vector["dimension"]
    prefix = vector["prefix"]
    if not is_header:
        file.write("inline ")
    file.write(f"{name} {prefix}_scale({name} a, {comp} scale)")
    if is_header:
        file.write(";\n")
        return
    file.write(" {\n")

    file.write(f"\treturn (({name}){{\n")
    for i in range(0, vector["dimension"]):
        field = component_names[i]
        file.write(f"\t\t.{field} = a.{field} * scale,\n")
    file.write("\t});\n")
    file.write("}\n")


def vector_op(file, vector, is_header, method_name, op):
    name = vector["name"]
    comp = vector["component"]
    dim = vector["dimension"]
    prefix = vector["prefix"]
    if not is_header:
        file.write("inline ")
    file.write(f"{name} {prefix}_{method_name}({name} a, {name} b)")
    if is_header:
        file.write(";\n")
        return
    file.write(" {\n")

    file.write(f"\treturn (({name}){{\n")
    for i in range(0, vector["dimension"]):
        field = component_names[i]
        file.write(f"\t\t.{field} = a.{field} {op} b.{field},\n")
    file.write("\t});\n")

    file.write("}\n")



def vector_typedef(file, vector):
    comp = vector["component"]
    dim = vector["dimension"]
    name = vector["name"]
    file.write("typedef union {\n")

    file.write("\tstruct { ")
    for i in range(0, dim):
        field = component_names[i]
        file.write(f"{comp} {field}; ")
    file.write("};\n")

    file.write(f"\t{comp} v[{dim}];\n")

    file.write(f"}} {name};\n\n")


def write_file(file, is_header):
    file.write("// This file has been autogenerated using math.py\n")
    if is_header:
        file.write(f"#ifndef {header_guard}\n")
        file.write(f"#define {header_guard}\n")
    else:
        file.write(f"#include \"{filename}.h\"\n")
    file.write("\n")

    for vector in vectors:
        vector_create(file, vector, is_header)

    file.write("\n")
    if is_header:
        file.write(f"#endif // {header_guard}\n")


with open(f"{include_folder}/{filename}.h", "w") as f:
    write_file(f, True)

with open(f"{src_folder}/{filename}.c", "w") as f:
    write_file(f, False)

